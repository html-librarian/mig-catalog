#!/usr/bin/env python3
"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ MIG Catalog API

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python run_tests.py                    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    python run_tests.py --fast            # –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
    python run_tests.py --security        # –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    python run_tests.py --basic           # –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
    python run_tests.py --services        # –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
    python run_tests.py --auth            # –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    python run_tests.py --validators      # –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    python run_tests.py --coverage        # –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
    python run_tests.py --verbose         # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
    python run_tests.py --parallel        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    python run_tests.py --help            # –°–ø—Ä–∞–≤–∫–∞
"""

import sys
import subprocess
import argparse
import os
from pathlib import Path
from typing import List, Optional


class TestRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.tests_dir = self.project_root / "tests"
        self.coverage_dir = self.project_root / "htmlcov"
        
    def run_command(self, command: List[str], description: str) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        print(f"\nüîÑ {description}...")
        print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(command)}")
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            env = os.environ.copy()
            env["TESTING"] = "true"
            
            result = subprocess.run(
                command,
                cwd=self.project_root,
                capture_output=True,
                text=True,
                timeout=300,  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
                env=env
            )
            
            if result.returncode == 0:
                print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û")
                if result.stdout:
                    print(result.stdout)
                return True
            else:
                print(f"‚ùå {description} - –û–®–ò–ë–ö–ê")
                if result.stderr:
                    print(result.stderr)
                if result.stdout:
                    print(result.stdout)
                return False
                
        except subprocess.TimeoutExpired:
            print(f"‚è∞ {description} - –¢–ê–ô–ú–ê–£–¢")
            return False
        except Exception as e:
            print(f"üí• {description} - –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
            return False
    
    def install_dependencies(self) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return self.run_command(
            ["pip", "install", "-r", "requirements.txt"],
            "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
        )
    
    def run_basic_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã"""
        return self.run_command(
            ["python3", "-m", "pytest", "tests/test_basic.py", "-v"],
            "–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã"
        )
    
    def run_auth_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        return self.run_command(
            ["python3", "-m", "pytest", "tests/test_auth.py", "-v"],
            "–¢–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        )
    
    def run_security_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        return self.run_command(
            ["python3", "-m", "pytest", "tests/test_security.py", "-v"],
            "–¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        )
    
    def run_validators_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        return self.run_command(
            ["python3", "-m", "pytest", "tests/test_validators.py", "-v"],
            "–¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
        )
    
    def run_services_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤"""
        return self.run_command(
            ["python3", "-m", "pytest", "tests/test_services.py", "-v"],
            "–¢–µ—Å—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤"
        )
    
    def run_fast_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (–±–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö)"""
        return self.run_command(
            ["python3", "-m", "pytest", "tests/test_basic.py", "tests/test_validators.py", "-v"],
            "–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã"
        )
    
    def run_all_tests(self, parallel: bool = False) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        cmd = ["python3", "-m", "pytest", "tests/", "-v"]
        if parallel:
            cmd.extend(["-n", "auto"])
        
        return self.run_command(cmd, "–í—Å–µ —Ç–µ—Å—Ç—ã")
    
    def run_tests_with_coverage(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞"""
        return self.run_command(
            [
                "python3", "-m", "pytest", "tests/", 
                "--cov=app", 
                "--cov-report=html",
                "--cov-report=term-missing",
                "-v"
            ],
            "–¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞"
        )
    
    def run_linting(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–¥–∞"""
        return self.run_command(
            ["python3", "-m", "flake8", "app/", "--max-line-length=79"],
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞"
        )
    
    def run_security_scan(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        return self.run_command(
            ["bandit", "-r", "app/", "-f", "json"],
            "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        )
    
    def run_type_checking(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–æ–≤"""
        return self.run_command(
            ["python3", "-m", "mypy", "app/"],
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤"
        )
    
    def cleanup_coverage(self):
        """–û—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª—ã –ø–æ–∫—Ä—ã—Ç–∏—è"""
        if self.coverage_dir.exists():
            import shutil
            shutil.rmtree(self.coverage_dir)
            print("üßπ –û—á–∏—â–µ–Ω—ã —Ñ–∞–π–ª—ã –ø–æ–∫—Ä—ã—Ç–∏—è")
    
    def show_coverage_report(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏"""
        coverage_file = self.coverage_dir / "index.html"
        if coverage_file.exists():
            print(f"\nüìä –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏: {coverage_file}")
            print("–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        else:
            print("üìä –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def run_test_suite(self, args) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤"""
        success = True
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if args.install_deps:
            success &= self.install_dependencies()
        
        # –û—á–∏—â–∞–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if args.coverage:
            self.cleanup_coverage()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        if args.fast:
            success &= self.run_fast_tests()
        elif args.basic:
            success &= self.run_basic_tests()
        elif args.auth:
            success &= self.run_auth_tests()
        elif args.security:
            success &= self.run_security_tests()
        elif args.validators:
            success &= self.run_validators_tests()
        elif args.services:
            success &= self.run_services_tests()
        elif args.coverage:
            success &= self.run_tests_with_coverage()
            if success:
                self.show_coverage_report()
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
            success &= self.run_all_tests(args.parallel)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if args.lint:
            success &= self.run_linting()
        
        if args.security_scan:
            success &= self.run_security_scan()
        
        if args.type_check:
            success &= self.run_type_checking()
        
        return success


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ MIG Catalog API",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python run_tests.py                    # –í—Å–µ —Ç–µ—Å—Ç—ã
  python run_tests.py --fast            # –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
  python run_tests.py --security        # –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  python run_tests.py --coverage        # –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
  python run_tests.py --parallel        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
  python run_tests.py --lint            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞
        """
    )
    
    # –ì—Ä—É–ø–ø–∞ —Ç–µ—Å—Ç–æ–≤
    test_group = parser.add_mutually_exclusive_group()
    test_group.add_argument("--fast", action="store_true", help="–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã")
    test_group.add_argument("--basic", action="store_true", help="–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã")
    test_group.add_argument("--auth", action="store_true", help="–¢–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    test_group.add_argument("--security", action="store_true", help="–¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    test_group.add_argument("--validators", action="store_true", help="–¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    test_group.add_argument("--services", action="store_true", help="–¢–µ—Å—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤")
    test_group.add_argument("--coverage", action="store_true", help="–¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    parser.add_argument("--parallel", action="store_true", help="–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    parser.add_argument("--install-deps", action="store_true", help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    parser.add_argument("--lint", action="store_true", help="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞")
    parser.add_argument("--security-scan", action="store_true", help="–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    parser.add_argument("--type-check", action="store_true", help="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º runner –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = TestRunner()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ MIG Catalog API")
    print("=" * 50)
    
    success = runner.run_test_suite(args)
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏!")
        sys.exit(1)


if __name__ == "__main__":
    main() 