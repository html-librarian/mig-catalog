#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Alembic –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
"""

import argparse
import subprocess
from pathlib import Path


def run_alembic_command(args):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É Alembic"""
    try:
        result = subprocess.run(
            ["alembic"] + args,
            cwd=Path(__file__).parent,
            capture_output=True,
            text=True,
            check=True,
        )
        print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã Alembic: {e}")
        print(f"–í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏: {e.stderr}")
        return False
    except FileNotFoundError:
        print("–û—à–∏–±–∫–∞: Alembic –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return False


def show_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π"""
    print("üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:")
    run_alembic_command(["current"])
    print("\nüìã –ò—Å—Ç–æ—Ä–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:")
    run_alembic_command(["history"])


def upgrade_migrations(revision="head"):
    """–û–±–Ω–æ–≤–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–æ {revision}...")
    if run_alembic_command(["upgrade", revision]):
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        show_status()


def downgrade_migrations(revision="-1"):
    """–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print(f"‚è™ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ {revision}...")
    if run_alembic_command(["downgrade", revision]):
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞—á–µ–Ω—ã!")
        show_status()


def reset_database():
    """–°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ!")
    confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
    if confirm.lower() != "y":
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    print("üîÑ –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    if run_alembic_command(["downgrade", "base"]):
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞!")
        print("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
        if run_alembic_command(["upgrade", "head"]):
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            show_status()


def create_migration(message):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
    print(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏: {message}")
    if run_alembic_command(["revision", "--autogenerate", "-m", message]):
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!")
        show_status()


def main():
    parser = argparse.ArgumentParser(
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python manage_migrations.py status          # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
  python manage_migrations.py upgrade        # –û–±–Ω–æ–≤–∏—Ç—å –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
  python manage_migrations.py upgrade 001    # –û–±–Ω–æ–≤–∏—Ç—å –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏
  python manage_migrations.py downgrade      # –û—Ç–∫–∞—Ç–∏—Ç—å –Ω–∞ –æ–¥–Ω—É –≤–µ—Ä—Å–∏—é
  python manage_migrations.py downgrade base # –û—Ç–∫–∞—Ç–∏—Ç—å –¥–æ –Ω–∞—á–∞–ª–∞
  python manage_migrations.py reset          # –°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  python manage_migrations.py create "Add users table"  # –°–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
        """,
    )

    parser.add_argument(
        "action",
        choices=["status", "upgrade", "downgrade", "reset", "create"],
        help="–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
    )

    parser.add_argument(
        "revision",
        nargs="?",
        default="head",
        help="–†–µ–≤–∏–∑–∏—è –¥–ª—è upgrade/downgrade –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è create",
    )

    args = parser.parse_args()

    if args.action == "status":
        show_status()
    elif args.action == "upgrade":
        upgrade_migrations(args.revision)
    elif args.action == "downgrade":
        downgrade_migrations(args.revision)
    elif args.action == "reset":
        reset_database()
    elif args.action == "create":
        create_migration(args.revision)


if __name__ == "__main__":
    main()
