from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from app.users import users_router
from app.catalog import items_router
from app.orders import orders_router
from app.news import articles_router
from app.core.auth_api import router as auth_router
from app.core.middleware import LoggingMiddleware, ErrorHandlingMiddleware, SecurityHeadersMiddleware
from app.core.logging import setup_logging
from app.db.base import Base
from app.db.session import engine, health_check_db, get_db_stats
from app.core.rate_limiter import rate_limiter
import os
from dotenv import load_dotenv
import time

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = setup_logging()

# –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ create_all
if os.getenv("ENVIRONMENT") != "production":
    # –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    Base.metadata.create_all(bind=engine)
else:
    # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏
    logger.info("Production environment detected. Tables should be created via migrations.")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FastAPI
app = FastAPI(
    title="MIG Catalog API",
    description="""
    ## MIG Catalog API

    –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π API –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ MIG —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π.

    ### –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:

    * üîê **–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è** - JWT —Ç–æ–∫–µ–Ω—ã, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥
    * üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏** - CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
    * üõçÔ∏è **–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤** - –ü–æ–∏—Å–∫, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    * üì¶ **–°–∏—Å—Ç–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤** - –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
    * üì∞ **–ù–æ–≤–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ç—å–∏** - –ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
    * üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** - Rate limiting, –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    * üìä **–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ** - –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π

    ### –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:

    * **FastAPI** - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫
    * **SQLAlchemy** - ORM –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    * **PostgreSQL** - –û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    * **Redis** - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ rate limiting
    * **JWT** - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    * **Pydantic** - –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

    ### –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:

    –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bearer —Ç–æ–∫–µ–Ω:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    """,
    version="1.3.0",
    docs_url="/docs",
    redoc_url="/redoc",
    contact={
        "name": "MIG Development Team",
        "email": "dev@mig-catalog.com",
    },
    license_info={
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT",
    },
)

# –î–æ–±–∞–≤–ª—è–µ–º middleware –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
app.add_middleware(ErrorHandlingMiddleware)
app.add_middleware(LoggingMiddleware)
app.add_middleware(SecurityHeadersMiddleware)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
allowed_origins = os.getenv("ALLOWED_ORIGINS", "http://localhost:3000,http://localhost:8080").split(",")
app.add_middleware(
    CORSMiddleware,
    allow_origins=allowed_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è API v1
from fastapi import APIRouter

api_v1_router = APIRouter(prefix="/api/v1")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∫ API v1
api_v1_router.include_router(auth_router, prefix="/auth")
api_v1_router.include_router(users_router, prefix="/users")
api_v1_router.include_router(items_router, prefix="/items")
api_v1_router.include_router(orders_router, prefix="/orders")
api_v1_router.include_router(articles_router, prefix="/news")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API —Ä–æ—É—Ç–µ—Ä
app.include_router(api_v1_router)


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MIG Catalog API",
        "version": "1.0.0",
        "docs": "/docs"
    }


@app.get("/health")
async def health_check():
    """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    return {
        "status": "healthy",
        "service": "mig-catalog-api"
    }


@app.get("/health/detailed")
async def detailed_health_check():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    health_status = {
        "status": "healthy",
        "service": "mig-catalog-api",
        "timestamp": time.time(),
        "checks": {}
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        db_healthy = health_check_db()
        health_status["checks"]["database"] = {
            "status": "healthy" if db_healthy else "unhealthy",
            "details": get_db_stats() if db_healthy else None
        }
    except Exception as e:
        health_status["checks"]["database"] = {
            "status": "unhealthy",
            "error": str(e)
        }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    try:
        redis_info = rate_limiter.get_rate_limit_info("health_check", "/health")
        health_status["checks"]["redis"] = {
            "status": "healthy",
            "details": redis_info
        }
    except Exception as e:
        health_status["checks"]["redis"] = {
            "status": "unhealthy",
            "error": str(e)
        }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_env_vars = ["SECRET_KEY", "DATABASE_URL"]
    missing_vars = [var for var in required_env_vars if not os.getenv(var)]

    health_status["checks"]["environment"] = {
        "status": "healthy" if not missing_vars else "unhealthy",
        "missing_variables": missing_vars if missing_vars else None
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    all_healthy = all(
        check["status"] == "healthy"
        for check in health_status["checks"].values()
    )

    health_status["status"] = "healthy" if all_healthy else "unhealthy"

    return health_status


@app.get("/metrics")
async def get_metrics():
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    import psutil

    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    cpu_percent = psutil.cpu_percent(interval=1)
    memory = psutil.virtual_memory()
    disk = psutil.disk_usage('/')

    # –ú–µ—Ç—Ä–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_stats = get_db_stats()

    # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    import gc
    gc.collect()

    return {
        "system": {
            "cpu_percent": cpu_percent,
            "memory_percent": memory.percent,
            "memory_available": memory.available,
            "disk_percent": disk.percent,
            "disk_free": disk.free
        },
        "database": db_stats,
        "application": {
            "gc_objects": len(gc.get_objects()),
            "gc_garbage": len(gc.garbage)
        }
    }
