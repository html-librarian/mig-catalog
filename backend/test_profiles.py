#!/usr/bin/env python3
"""
–ü—Ä–æ—Ñ–∏–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è MIG Catalog API

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
"""

import os
import subprocess
import sys
import time
from pathlib import Path
from typing import List


class TestProfiles:
    """–ü—Ä–æ—Ñ–∏–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        
    def run_profile(self, profile_name: str) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –ø–æ –ø—Ä–æ—Ñ–∏–ª—é"""
        profiles = {
            "quick": self.quick_profile,
            "development": self.development_profile,
            "ci": self.ci_profile,
            "security": self.security_profile,
            "performance": self.performance_profile,
            "full": self.full_profile,
            "smoke": self.smoke_profile,
            "regression": self.regression_profile,
        }
        
        if profile_name not in profiles:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {profile_name}")
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏: {', '.join(profiles.keys())}")
            return False
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è: {profile_name}")
        print("=" * 50)
        
        start_time = time.time()
        success = profiles[profile_name]()
        end_time = time.time()
        
        duration = end_time - start_time
        print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        if success:
            print("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏!")
        
        return success
    
    def quick_profile(self) -> bool:
        """–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Ñ–∏–ª—å - —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã"""
        print("üîç –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Ñ–∏–ª—å - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        
        commands = [
            ["python3", "-m", "pytest", "tests/test_basic.py", "-v", "-m", "fast"],
            ["python3", "-m", "pytest", "tests/test_validators.py", "-v", "-m", "fast"],
        ]
        
        return self._run_commands(commands, "–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã")
    
    def development_profile(self) -> bool:
        """–ü—Ä–æ—Ñ–∏–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö"""
        print("üõ†Ô∏è  –ü—Ä–æ—Ñ–∏–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã")
        
        commands = [
            ["python3", "-m", "pytest", "tests/test_basic.py", "-v"],
            ["python3", "-m", "pytest", "tests/test_validators.py", "-v"],
            ["python3", "-m", "pytest", "tests/test_auth.py", "-v"],
            ["python3", "-m", "pytest", "tests/test_services.py", "-v", "-m", "not slow"],
            ["python3", "-m", "flake8", "app/", "--max-line-length=79"],
        ]
        
        return self._run_commands(commands, "–¢–µ—Å—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    
    def ci_profile(self) -> bool:
        """CI –ø—Ä–æ—Ñ–∏–ª—å - –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è CI/CD"""
        print("üîß CI –ø—Ä–æ—Ñ–∏–ª—å - –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤")
        
        commands = [
            ["python3", "-m", "pytest", "tests/", "-v", "--cov=app", "--cov-report=term-missing"],
            ["bandit", "-r", "app/", "-f", "json"],
        ]
        
        return self._run_commands(commands, "CI —Ç–µ—Å—Ç—ã")
    
    def security_profile(self) -> bool:
        """–ü—Ä–æ—Ñ–∏–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –≤—Å–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üõ°Ô∏è  –ü—Ä–æ—Ñ–∏–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        commands = [
            ["python3", "-m", "pytest", "tests/test_security.py", "-v"],
            ["python3", "-m", "pytest", "tests/test_auth.py", "-v"],
            ["bandit", "-r", "app/", "-f", "json"],
            ["pip-audit"],
        ]
        
        return self._run_commands(commands, "–¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    def performance_profile(self) -> bool:
        """–ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("‚ö° –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        commands = [
            ["python3", "-m", "pytest", "tests/test_services.py", "-v", "-m", "performance"],
            ["python3", "-m", "pytest", "tests/test_basic.py", "-v", "-m", "performance"],
        ]
        
        return self._run_commands(commands, "–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    def full_profile(self) -> bool:
        """–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å - –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print("üéØ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å - –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏")
        
        commands = [
            ["python3", "-m", "pytest", "tests/", "-v", "--cov=app", "--cov-report=html"],
            ["python3", "-m", "flake8", "app/", "--max-line-length=79"],
            ["bandit", "-r", "app/", "-f", "json"],
            ["python3", "-m", "mypy", "app/", "--ignore-missing-imports"],
            ["pip-audit"],
            ["safety", "check"],
        ]
        
        return self._run_commands(commands, "–ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã")
    
    def smoke_profile(self) -> bool:
        """Smoke –ø—Ä–æ—Ñ–∏–ª—å - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
        print("üí® Smoke –ø—Ä–æ—Ñ–∏–ª—å - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")
        
        commands = [
            ["python3", "-m", "pytest", "tests/test_basic.py", "-v", "-m", "smoke"],
            ["curl", "-f", "http://localhost:8000/health"],
        ]
        
        return self._run_commands(commands, "Smoke —Ç–µ—Å—Ç—ã")
    
    def regression_profile(self) -> bool:
        """–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å - —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–π"""
        print("üîÑ –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥—Ä–µ—Å—Å–∏–π")
        
        commands = [
            ["python3", "-m", "pytest", "tests/test_services.py", "-v", "-m", "regression"],
            ["python3", "-m", "pytest", "tests/test_auth.py", "-v", "-m", "regression"],
            ["python3", "-m", "pytest", "tests/test_validators.py", "-v", "-m", "regression"],
        ]
        
        return self._run_commands(commands, "–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
    
    def _run_commands(self, commands: List[List[str]], description: str) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"""
        success = True
        
        for i, command in enumerate(commands, 1):
            print(f"\nüîÑ {description} ({i}/{len(commands)}): {' '.join(command)}")
            
            try:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                env = os.environ.copy()
                env["TESTING"] = "true"
                
                result = subprocess.run(
                    command,
                    cwd=self.project_root,
                    capture_output=True,
                    text=True,
                    timeout=300,
                    env=env
                )
                
                if result.returncode == 0:
                    print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ {i} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    if result.stdout:
                        print(result.stdout)
                else:
                    print(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ {i} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
                    if result.stderr:
                        print(result.stderr)
                    success = False
                    
            except subprocess.TimeoutExpired:
                print(f"‚è∞ –ö–æ–º–∞–Ω–¥–∞ {i} –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç")
                success = False
            except Exception as e:
                print(f"üí• –ö–æ–º–∞–Ω–¥–∞ {i} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: {e}")
                success = False
        
        return success


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_profiles.py <–ø—Ä–æ—Ñ–∏–ª—å>")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:")
        print("  quick        - –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã")
        print("  development  - –ü—Ä–æ—Ñ–∏–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        print("  ci           - CI/CD –ø—Ä–æ—Ñ–∏–ª—å")
        print("  security     - –ü—Ä–æ—Ñ–∏–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        print("  performance  - –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("  full         - –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å")
        print("  smoke        - Smoke —Ç–µ—Å—Ç—ã")
        print("  regression   - –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
        sys.exit(1)
    
    profile_name = sys.argv[1]
    runner = TestProfiles()
    
    success = runner.run_profile(profile_name)
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main() 